declare routineName
routineName = "PROTOTYPE_CONWAYS_GAME_OF_LIFE"
' ====================================================================================
' Change History:
'
' Date				By					Reason
' 10-Sep-2019		Cody Herrmann		Initial_version
' ====================================================================================
'
' This subroutine implements the famous Conway's Game of Life
'
' ====================================================================================
' Setup Game Parameters
DECLARE arrayBounds liveCellCutoff liveColor deadColor

arrayBounds = 10
liveCellCutoff = 0.75

liveColor = "FF0000"
deadColor = "FFFFFF"
' ====================================================================================
' Generate the Initial Seed Array
DECLARE i j seedArray

FOR i = 1 TO arrayBounds STEP 1 
	FOR j = 1 TO arrayBounds STEP 1

		seedArray[i,j] = Rnd(1) 

		IF (seedArray[i,j] >= liveCellCutoff) THEN 
			seedArray[i,j] = 1
		ELSE 
			seedArray[i,j] = 0
		ENDIF

	NEXT 
NEXT 
' ====================================================================================
' Loop and display the generations
DECLARE seedCount continueSimulation previousSeed
DECLARE neighbors curVal nextVal
DECLARE htmlOut CRLF dblQt tmp hasSurvivors

CRLF = CHR(13) + CHR(10) 
dblQt = CHR(34) 

seedCount = 0
continueSimulation = TRUE 

WHILE (continueSimulation)
	' ====================================================================================
	' Cache Previous Seed
	' (Assignment only moves pointer, doesn't actually duplicate array)
	status = ClearArray("previousSeed")
	
	tmp = ArrayToCSVString(seedArray, ",") 
	status = ArrayFromCSVString(tmp, ",", "", "T", "previousSeed") 
	' ====================================================================================
	' Build HTML Text
	htmlOut = ""
	htmlOut = htmlOut + "<h3>Current Generation: " + seedCount + "</h3>" + CRLF
	htmlOut = htmlOut + "<table width={dblQt}100%{dblQt} height={dblQt}300px{dblQt} border={dblQt}1px{dblQt}>" + CRLF
	' ====================================================================================
	' Update Seed

	hasSurvivors = FALSE

	FOR i = 1 TO arrayBounds STEP 1 
		
		htmlOut = htmlOut + "<tr>" + CRLF
		
		FOR j = 1 TO arrayBounds STEP 1
			' ====================================================================================
			' Determine Neighbor Count
			neighbors = 0
			curVal = previousSeed[i,j] 

			IF (previousSeed[i - 1,j] > 0) AND (NotEmpty(previousSeed[i - 1,j])) THEN
				neighbors = neighbors + 1
			ENDIF 

			IF (previousSeed[i - 1, j + 1] > 0) AND (NotEmpty(previousSeed[i - 1, j + 1])) THEN
				neighbors = neighbors + 1
			ENDIF 

			IF (previousSeed[i - 1, j - 1] > 0) AND (NotEmpty(previousSeed[i - 1, j - 1])) THEN
				neighbors = neighbors + 1
			ENDIF 

			IF (previousSeed[i, j + 1] > 0) AND (NotEmpty(previousSeed[i, j + 1])) THEN
				neighbors = neighbors + 1
			ENDIF 

			IF (previousSeed[i,j - 1] > 0) AND (NotEmpty(previousSeed[i,j - 1])) THEN
				neighbors = neighbors + 1
			ENDIF 

			IF (previousSeed[i + 1,j] > 0) AND (NotEmpty(previousSeed[i + 1,j])) THEN
				neighbors = neighbors + 1
			ENDIF 

			IF (previousSeed[i + 1, j - 1] > 0) AND (NotEmpty(previousSeed[i + 1, j - 1])) THEN
				neighbors = neighbors + 1
			ENDIF 

			IF (previousSeed[i + 1, j + 1] > 0) AND (NotEmpty(previousSeed[i + 1, j + 1])) THEN
				neighbors = neighbors + 1
			ENDIF 
			' ====================================================================================
			' Update next generation value
			nextVal = 0

			SELECTCASE curVal 
			CASE 1
				IF (neighbors = 2) OR (neighbors = 3) THEN
					nextVal = 1
				ELSE 
					nextVal = 0
				ENDIF 
			CASE 0
				IF (neighbors = 3) THEN 
					nextVal = 1
				ENDIF 
			CASE ELSE 				
			ENDSELECT

			IF (nextVal = 1) AND (Not(hasSurvivors)) THEN
				hasSurvivors = TRUE
			ENDIF

			seedArray[i,j] = nextVal 
			' ====================================================================================
			' Build HTML Text

			tmp = "000000"

			SELECTCASE nextVal
			CASE 1
				tmp = liveColor 
			CASE 0
				tmp = deadColor 
			CASE ELSE 
			ENDSELECT 

			htmlOut = htmlOut + "<td bgcolor={dblQt}#{tmp}{dblQt}> </td>" + CRLF
			htmlOut = StringReplace(htmlOut, "{tmp}", tmp , "T")
			' ====================================================================================
		NEXT

		htmlOut = htmlOut + "</tr>" + CRLF

	NEXT
	' ====================================================================================
	' Display to User and Prompt
	htmlOut = htmlOut + "</table>" + CRLF

	htmlOut = StringReplace(htmlOut, "{dblQt}", dblQt , "T") 

	MsgboxHtml(htmlOut) 

	IF (seedCount >= 25) THEN 
		continueSimulation = FALSE 
	ENDIF 
	' ====================================================================================
	' If no Survivors, end simulation
	IF (Not(hasSurvivors)) THEN
		continueSimulation = FALSE 
	ENDIF 
	' ====================================================================================
	seedCount = seedCount + 1
WEND 
' ====================================================================================
RETURN 
